---
- summary: |
    Успешная регистрация нового пользователя с валидными данными
  requirement: |
    Пользователь должен иметь возможность создавать аккаунт
  prerequisites: |
    Открыта страница регистрации "Sign up"
  test-data: |
    Nickname = User2026
    Email = user@example.com  
    Password = StrongPass123$
    Password confirmation = StrongPass123$
  steps:
    - Ввести в поле Nickname значение User2026
    - Ввести в поле Email значение user@example.com
    - Ввести в поле Password значение StrongPass123$
    - Ввести в поле Password Confirmation значение StrongPass123$
    - Нажать «Sign up»
  expected-result: |
    - Редирект на главную страницу `/home`
    - Пользователь автоматически авторизован (в cookie появился sessionId)

- summary: |
    Неуспешная регистрация: email уже используется
  requirement: |
    Пользователь должен получать ошибку при дублировании данных
  prerequisites: |
    На сервере уже существует пользователь с email user@example.com
    Открыта страница регистрации "Sign up"
  test-data: |
    Nickname = User2026
    Email = user@example.com  
    Password = StrongPass123$
    Password confirmation = StrongPass123$
  steps:
    - Ввести в поле Nickname значение User2026
    - Ввести в поле Email значение user@example.com
    - Ввести в поле Password значение StrongPass123$
    - Ввести в поле Password Confirmation значение StrongPass123$
    - Нажать «Sign up»
  expected-result: |
    - Показано сообщение "Email is already taken"
    - Пользователь остаётся на странице Sign up

- summary: |
    Неуспешная регистрация: пароли не совпадают
  requirement: |
    Пользователь должен получать ошибку при несовпадении пароля и его подтверждения
  prerequisites: |
    Открыта страница регистрации "Sign up"
  test-data: |
    Nickname = User2027
    Email = user2027@example.com  
    Password = StrongPass123$
    Password Confirmation= DifferentPass456#
  steps:
    - Ввести в поле Nickname значение User2027
    - Ввести в поле Email значение user2027@example.com
    - Ввести в поле Password значение StrongPass123$
    - Ввести в поле Password Confirmation значение DifferentPass456#
    - Нажать «Sign up»
  expected-result: |
    - Показано сообщение ошибки "Password must match"
    - Пользователь остаётся на странице Sign up
    - Аккаунт не создаётся

- summary: |
    Успешная авторизация пользователя
  requirement: |
    Пользователь должен иметь возможность входить в систему
  prerequisites: |
    Зарегистрирован пользователь  
    Открыта страница логина "Sign in"
  test-data: |
    Email = user@example.com  
    Password = StrongPass123$
  steps:
    - Ввести в поле Email значение user@example.com
    - Ввести в поле Password значение StrongPass123$
    - Нажать «Submit»
  expected-result: |
    - Произошёл редирект на URL `/home`
    - В cookie-файлах появился параметр `sessionId`
    - В шапке отображается имя пользователя user@example.com

- summary: |
    Неуспешная авторизация пользователя: неверный пароль
  requirement: |
    Пользователь должен получать ошибку при неверных учётных данных
  prerequisites: |
    Зарегистрирован пользователь  
    Открыта страница логина "Sign in"
  test-data: |
    Email = user@example.com  
    Password = WrongPass!
  steps:
    - Ввести в поле Email значение user@example.com
    - Ввести в поле Password значение WrongPass!
    - Нажать «Submit»
  expected-result: |
    - Показано сообщение ошибки "Неверный логин или пароль"
    - Пользователь остаётся на странице Sign in

- summary: |
    Неуспешная авторизация пользователя: несуществующий логин
  requirement: |
    При вводе несуществующего логина пользователь должен получать сообщение об ошибке
  prerequisites: |
    Открыта страница логина "Sign in"
    Нет активной сессии
  test-data: |
    Email = unknownuser@example.com  
    Password = StrongPass123$
  steps:
    - Ввести в поле Email значение unknownuser@example.com
    - Ввести в поле Password значение StrongPass123$
    - Нажать «Submit»
  expected-result: |
    - Показано сообщение ошибки "Email not found"
    - Пользователь остаётся на странице Sign in
    - В cookie-файлах нет параметра sessionId

- summary: |
    Выход из системы
  requirement: |
    Пользователь должен иметь возможность выйти из системы
  prerequisites: |
    Пользователь авторизован и находится на главной странице
  test-data: |
    Email = user@example.com  
    Password = StrongPass123$
  steps:
    - Нажимаем на аватарку в правом верхнем углу
    - Выбираем пункт «Sign out»
  expected-result: |
    Пользователь выходит из аккаунта и перенаправляется на главную страницу

- summary: |
    Успешный авторизация пользователя через валидный GitHub аккаунт
  requirement: |
    Пользователь должен иметь возможность войти в систему через GitHub
  prerequisites: |
    Зарегистрирован пользователь  
    GitHub-аккаунт привязан к профилю  
    Нет активной сессии  
    Открыта главная страница
  test-data: |
    GitHub аккаунт с доступом к Codebattle
  steps:
    - На главной странице нажимаем кнопку "Sign in with GitHub"
    - Подтверждаем авторизацию на стороне GitHub
  expected-result: |
    Пользователь автоматически авторизуется и попадает на главную страницу Codebattle

- summary: |
    Неуспешная авторизация через GitHub: отказ на стороне провайдера
   requirement: |
    Пользователь должен получать ошибку при отказе в авторизации на стороне GitHub
  prerequisites: |
    Зарегистрирован пользователь с привязанным GitHub-аккаунтом  
    Открыта главная страница
  test-data: |
    GitHub-аккаунт user-gh (привязан)
  steps:
    - На главной странице нажать кнопку «Sign in with GitHub»
    - В появившемся окне OAuth нажать «Отменить» или «Deny»
  expected-result: |
    - Показано сообщение ошибки "Авторизация через GitHub отклонена. Пожалуйста, попробуйте снова."  
    - Пользователь перенаправляется на главную страницу

- summary: |
    Успешный авторизация пользователя через валидный Discord аккаунт
  requirement: |
    Пользователь должен иметь возможность войти в систему через Discord
  prerequisites: |
    Зарегистрирован пользователь  
    Discord-аккаунт привязан к профилю  
    Нет активной сессии  
    Открыта главная страница
  test-data: |
    Discord аккаунт с доступом к Codebattle
  steps:
    - На главной странице нажимаем кнопку "Sign in with Discord"
    - Подтверждаем авторизацию через Discord
  expected-result: |
    Пользователь успешно входит и перенаправляется в систему

- summary: |
    Неуспешная авторизация через Discord: отказ на стороне провайдера
  requirement: |
    Пользователь должен получать ошибку при отказе в авторизации на стороне Discord
  prerequisites: |
    Зарегистрирован пользователь с привязанным Discord-аккаунтом  
    Открыта главная страница
  test-data: |
    Discord-аккаунт user-discord (привязан)
  steps:
    - На главной странице нажать кнопку «Sign in with Discord»
    - В открывшемся окне нажать «Отменить» или «Deny»
  expected-result: |
    - Показано сообщение ошибки "Авторизация через Discord отклонена. Пожалуйста, попробуйте снова."  
    - Пользователь перенаправляется на главную страницу

- summary: |
    Восстановление пароля через email
  requirement: |
    Пользователь должен иметь возможность восстановить пароль
  prerequisites: |
    Открыта страница логина  
    Нет активной сессии
  test-data: |
    Email = user@example.com
  steps:
    - Нажимаем «Forgot your password?»
    - Вводим зарегистрированный email
    - Переходим по ссылке из письма
    - Вводим новый пароль и подтверждение
  expected-result: |
    Появляется уведомление, после входа новым паролем — доступ разрешён

- summary: |
    Неуспешное восстановление пароля: email не зарегистрирован
  requirement: |
    Пользователь должен получать ошибку при попытке восстановить пароль на несуществующий email
  prerequisites: |
    Открыта страница логина "Sign in"
    Нет активной сессии
  test-data: |
    Email = unknown@example.com
  steps:
    - Нажать ссылку «Forgot your password?»
    - Ввести в поле Email значение unknown@example.com
    - Нажать кнопку «Submit»
  expected-result: |
    - Показано сообщение ошибки "Email not found"
    - Пользователь остаётся на форме восстановления пароля
    - Письмо для сброса пароля не отправляется

- summary: |
    Создание новой игры с выбранным уровнем сложности
  requirement: |
    Пользователь должен иметь возможность создавать игру и выбирать уровень сложности
  prerequisites: |
    Пользователь авторизован  
    Открыта главная страница
  test-data: |
    Level = 2 звезды
    Game type = "With a bot"
  steps:
    - Нажимаем «Create a game»
    - Выбираем Level = 2 звезды
    - Выбираем Game type = "With a bot"
    - Нажимаем "Create battle"
  expected-result: |
    Игра создаётся, новая игра отображается в твоем Lobby
    
- summary: |
    Создание игры против бота
  requirement: |
    Пользователь должен иметь возможность создавать игру с ботом
  prerequisites: |
    Пользователь авторизован  
    Открыта страница «Create a game»
  test-data: |
    Game type = "With a bot"  
    Язык = JavaScript
  steps:
    - На странице «Create a game» выбрать опцию Game type = "With a bot"
    - Выбираем Level = 2 звезды
    - В выпадающем списке выбрать язык JavaScript
    - Нажать кнопку «Create battle»
  expected-result: |
    - Игра создаётся и появляется в списке активных игр
    - В списке участников указан пользователь и имя бота (например "DennisRitchie")
    - В интерфейсе отобразились поля редактора кода и консоль тестов  

- summary: |
    Возможность создавать турнир
  requirement: |
    Пользователь должен иметь возможность создавать турнир
  prerequisites: |
    Пользователь авторизован и имеет права на создание турниров
  test-data: |
    Название турнира = Test Tournament  
    Дата начала = завтра  
    Время начала = 18:00  
    Уровень сложности = elementary  
    Тип турнира = командный  
    Максимальное количество участников = 16  
  steps:
    - На главной странице перейти во вкладку "Tournaments"
    - Нажать "You may want to create one"
    - Ввести название турнира
    - Выбрать дату и время начала
    - Выбрать уровень сложности задач
    - Выбрать тип турнира
    - Указать максимальное количество участников
    - Нажать кнопку "Create"
  expected-result: |
    Турнир успешно создаётся, отображается в списке турниров с заданными параметрами

- summary: |
    Участие пользователя в турнире, созданном другим игроком
  requirement: |
    Пользователь должен иметь возможность участвовать в турнирах, созданных другими пользователями
  prerequisites: |
    Пользователь авторизован  
    Существует турнир, созданный другим игроком  
    Открыта главная страница
  test-data: |
    Название турнира = любой активный
  steps:
    - Переходим во вкладку "Tournaments"
    - Выбираем активный турнир
    - Нажимаем кнопку "Join"
  expected-result: |
    - Пользователь добавлен в список участников выбранного турнира
    - В разделе участников отображается его никнейм  
    - Появляется уведомление "Вы успешно присоединились к турниру"

-summary: |
    Участие организатора в собственном турнире по нажатию «Join»
  requirement: |
    Организатор турнира должен иметь возможность вручную присоединиться к своему турниру как участник
  prerequisites: |
    Пользователь авторизован  
    Пользователь создал турнир "My Fancy Tournament"  
    Открыта главная страница  
  test-data: |
    Название турнира = "My Fancy Tournament"
  steps:
    - Перейти во вкладку "Tournaments"
    - Открыть турнир "My Fancy Tournament"
    - В блоке команды (например, "Backend") нажать кнопку «Join»
  expected-result: |
    - Организатор отображается в списке участников выбранной команды  
    - Рядом с этой командой появляется кнопка «Leave»  
    - В противоположной команде кнопка «Join» остаётся доступной  
    - В блоке «Total players» обновляется число участников (увеличивается на 1)

- summary: |
    Приглашение друга в игру из списка
  requirement: |
    Пользователь должен иметь возможность приглашать друга в игру при её создании
  prerequisites: |
    Пользователь находится на странице создания игры  
    Друг авторизован и отображается в списке
  test-data: |
    Участник = друг из списка
  steps:
    - Выбираем Game type = "With a friend"
    - Выбираем друга из списка
    - Нажимаем кнопку «Create battle»
  expected-result: |
    Отображается уведомление об отправке приглашения, друг получает приглашение на игру

- summary: |
    Пользователь должен иметь возможность приглашать друга по ссылке
  requirement: |
    Зарегистрированный пользователь может создать приглашение и отправить ссылку другу для совместной игры.
  prerequisites: |
    Пользователь авторизован в системе.
  test-data: |
    Ник друга: "el primo"
  steps:
    - Нажать кнопку "Create a game"
    - Выбрать уровень сложности
    - Нажать кнопку "With a friend"
    - Выбрать друга "el primo" из списка 
    - Нажать "Create invite"
    - Скопировать ссылку игры в появившемся окне
    - Отправить эту ссылку другу в личные сообщения
  expected-result: |
    Ссылка открывается, и друг автоматически присоединяется к игре. Оба пользователя видят друг друга в интерфейсе игры.

- summary: |
    Одновременное отображение редактора кода и вывода тестов в реальном времени
  requirement: |
    Пользователь должен иметь возможность во время матча видеть редактор кода и вывод тестов
  prerequisites: |
    Оба игрока (или игрок и бот) присоединены к игре  
    Игра запущена
  test-data: |
    Код задачи: простая функция сложения
    ```js
    function sum(a, b) {
      return a + b;
    }
    ```
  steps:
    - Один игрок вводит код из test-data
    - Запускает тесты
    - Другой игрок наблюдает за редактором и выводом
  expected-result: |
    Оба игрока видят вводимый код и результаты тестов в реальном времени

summary: |
    Успешное завершение игры против бота с решением задачи поиска площади прямоугольника
  requirement: |
    Пользователь должен иметь возможность успешно завершить игру против бота при корректном решении
  prerequisites: |
    Пользователь авторизован  
    Открыта страница «Create a game»
  test-data: |
    Game type = "With a bot"  
    Язык = NodeJS  
    Код решения:
    ```js
    const _ = require("lodash");
    const R = require("rambda");

    const solution = (width, length) => {
      return width * length;
    };

    module.exports = solution;
    ```
  steps:
    - Нажать «Create a game»
    - Выбрать первый уровень
    - Выбрать Game type = "With a bot"
    - Выбрать язык NodeJS
    - Ввести в редактор код из test-data
    - Нажать «Run tests»
  expected-result: |
    - Все тесты проходят успешно
    - Появляется сообщение об успешном завершении игры  

summary: |
   Неуспешное завершение игры против бота при неверном решении задачи поиска площади прямоугольника
  requirement: |
   Система должна показывать ошибку, когда решение не соответствует условию задачи
  prerequisites: |
    Пользователь авторизован  
    Открыта страница «Create a game»
  test-data: |
    Game type = "With a bot"  
    Язык = NodeJS  
    Код решения:
    ```js
    const _ = require("lodash");
    const R = require("rambda");

    const solution = (width, length) => {
      return width + length;
    };

    module.exports = solution;
    ```
  steps:
    - Нажать «Create a game»
    - Выбрать первый уровень
    - Выбрать Game type = "With a bot"
    - Выбрать язык NodeJS
    - Ввести в редактор код из test-data
    - Нажать «Run tests»
  expected-result: |
    - Тесты падают (отмечены красным, показывается количество проваленных кейсов)  
    - Пользователь остаётся в текущем уровне с возможностью исправить код и повторить попытку  
    - Сообщение об ошибке указывает на несоответствие результата условию задачи

- summary: |
    Успешная смена языка программирования во время матча
  requirement: |
    Пользователь должен иметь возможность менять язык программирования во время матча без перезагрузки страницы
  prerequisites: |
    Пользователь авторизован  
    Игра запущена и открыт редактор кода  
    В игре участвует ещё один игрок или бот
  test-data: |
    Начальный язык = JavaScript  
    Новый язык = Python
  steps:
    - Кликнуть на выпадающий список выбора языка
    - Выбрать «Python»
  expected-result: |
    - Редактор переключился на язык Python  
    - Подсветка синтаксиса соответствует правилам Python  
    - Страница не перезагрузилась, игровая сессия осталась активной  

- summary: |
    Смена языка программирования во время матча
  requirement: |
    Пользователь должен иметь возможность менять язык во время матча
  prerequisites: |
    Игра запущена  
    Оба игрока в редакторе
  test-data: |
    Начальный язык = JavaScript  
    Новый язык = Python
  steps:
    - Открываем выпадающий список языков
    - Выбираем «Python»
  expected-result: |
    Редактор и подсветка кода переключаются на Python без перезагрузки страницы

- summary: |
    Просмотр списка завершённых игр пользователя
  requirement: |
    Пользователь должен иметь возможность просматривать завершённые игры
  prerequisites: |
    Пользователь авторизован  
    У пользователя есть завершённые игры
  test-data: |
    Одна завершённая игра
  steps:
    - Переходим в раздел "My Profile"
    - Переходим во вкладку "Completed Games"
  expected-result: |
    Отображается список завершённых игр с возможностью открыть реплей
    
- summary: |
    Вступление пользователя в клан
  requirement: |
    Пользователь должен иметь возможность вступать в существующие кланы
  prerequisites: |
    Пользователь авторизован  
    Существует хотя бы один открытый клан
  test-data: |
    Название клана = любой доступный
  steps:
    - Переходим в раздел "Clans"
    - Выбираем открытый клан
    - Нажимаем "Join clan"
  expected-result: |
    Пользователь становится участником выбранного клана

- summary: |
    Наблюдение за чужой игрой (spectator mode)
  requirement: |
    Пользователь может следить за ходом чужих матчей в режиме реального времени
  prerequisites: |
    Есть запущенная чужая игра  
    Открыта страница списка игр
  test-data: |
    Выбранная игра из списка
  steps:
    - Нажимаем «Наблюдать» напротив чужой игры
  expected-result: |
    Открывается окно с редактором и выводом тестов участников, без возможности редактировать

- summary: |
    Проверка работы чата внутри игры
  requirement: |
    Пользователь должен иметь возможность использовать чат внутри игры в режиме реального времени
  prerequisites: |
    Игра запущена  
    Два участника в лобби
  test-data: |
    Сообщение = «Привет, удачи!»  
    Ответ = «Спасибо!»
  steps:
    - Отправляем сообщение «Привет, удачи!»
    - Второй участник отвечает «Спасибо!»
  expected-result: |
    Оба сообщения мгновенно отображаются у обоих участников

- summary: |
    Приглашение игрока на дуэль через чат
  requirement: |
    Пользователь должен иметь возможность пригласить другого пользователя в игру из чата
  prerequisites: |
    Пользователь авторизован  
    Другой пользователь онлайн и доступен в чате
  test-data: |
    Сообщение: “@username Let's play!”
  steps:
    - Пишем в чате “@username Let's play!”
    - Нажимаем на появившуюся кнопку “Invite to battle”
  expected-result: |
    Пользователь получает приглашение на дуэль, отображается уведомление

- summary: |
    Воспроизведение завершённой игры через проигрыватель
  requirement: |
    После прохождения игры пользователь должен иметь возможность проиграть игру в проигрывателе
  prerequisites: |
    Существует хотя бы одна завершённая игра в профиле
  test-data: |
    Выбранная завершённая игра
  steps:
    - Переходим My profile
    - Переходим в Completed Games
    - В списке игр нажимаем «Show»
  expected-result: |
    Открывается проигрыватель, по шагам воспроизводится код и прохождение тестов

- summary: |
    Изменение настроек профиля пользователя
  requirement: |
    Пользователь должен иметь возможность редактировать доступные настройки профиля
  prerequisites: |
    Пользователь авторизован и находится на странице "Settings"
  test-data: |
    Имя = AljonaS-ux  
    Язык программирования = JavaScript  
    Клан = TestClan  
    Звук = CS  
    Уровень громкости = средний
  steps:
    - Меняем поле "Your name" на "AljonaS-ux"
    - Выбираем язык программирования "JavaScript" из выпадающего списка
    - Вводим название клана "TestClan"
    - Выбираем тип звука "CS"
    - Передвигаем ползунок громкости на средний уровень
    - Нажимаем кнопку "Save"
  expected-result: |
    Все изменения сохраняются и применяются без ошибок

- summary: |
    Проверка пагинации в общем рейтинге пользователей
  requirement: |
    Интерфейс должен поддерживать пагинацию или бесконечную прокрутку в списках рейтингов
  prerequisites: |
    Пользователь авторизован
    В рейтинге более 20 участников
  test-data: |
    Период = "Weekly"
  steps:
    - Перейти в раздел "Top List"
    - Выбрать период "Weekly"
    - Прокрутить вниз страницы или нажать кнопку перехода на следующую страницу
    - Убедиться, что загружаются следующие пользователи в рейтинге
  expected-result: |
   Следующая часть списка загружается без ошибок, данные пользователей отображаются корректно, переключение между страницами работает

- summary: |
    Просмотр рейтинга за неделю
  requirement: |
    Пользователь должен иметь возможность просматривать свой рейтинг за неделю
  prerequisites: |
    Пользователь авторизован и участвовал в играх
  test-data: |
    Период = "Неделя"
  steps:
    - Переходим в раздел «My Profile»
    - Выбираем период «Неделя»
  expected-result: |
    Отображается таблица рейтинга за неделю с позициями и очками пользователя

- summary: |
    Просмотр рейтинга за месяц
  requirement: |
    Пользователь должен иметь возможность просматривать свой рейтинг за месяц
  prerequisites: |
    Пользователь авторизован и участвовал в играх
  test-data: |
    Период = "Месяц"
  steps:
    - Переходим в раздел «My Profile»
    - Выбираем период «Месяц»
  expected-result: |
    Отображается таблица рейтинга за месяц с позициями и очками пользователя
    
- summary: |
    Просмотр рейтинга за всё время
  requirement: |
    Пользователь должен иметь возможность просматривать свой рейтинг за всё время
  prerequisites: |
    Пользователь авторизован и участвовал в играх
  test-data: |
    Период = "Все время"
  steps:
    - Переходим в раздел «My Profile»
    - Выбираем период «Все время»
  expected-result: |
    Отображается таблица рейтинга за всё время с позициями и очками пользователя

- summary: |
    Проверка адаптивности интерфейса на мобильных устройствах
  requirement: |
    Сайт должен корректно отображаться на мобильных устройствах
  prerequisites: |
    Открыты мобильные эмуляторы:
    - iPhone 12 (390x844)
    - Pixel 5 (393x851)
    Проверка в портретной и ландшафтной ориентации
  test-data: |
    Страницы: Главная, Лобби игры, Игровой экран
  steps:
    - Открыть каждую страницу в портретном и ландшафтном режиме эмулятора
    - Проверить доступность меню, редактора, кнопок
  expected-result: |
    Все элементы видимы, не перекрываются, меню открывается и закрывается без багов

- summary: |
    Успешный перевод задачи на английский язык
  requirement: |
    Задачи должны иметь полную поддержку английского языка
  prerequisites: |
    Пользователь авторизован  
    Игра создана и запущена  
  test-data: |
    Язык = English
  steps:
    - Кликнуть на кнопку выбора языка
    - Выбрать «English»
  expected-result: |
    - Текст задачи полностью отображается на английском языке

-summary: |
   Успешный перевод задачи на русский язык
 requirement: |
   Задачи должны иметь полную поддержку русского языка
 prerequisites: |
    Пользователь авторизован  
    Игра создана и запущена  
    Текущая задача доступна на русском и английском языках
 test-data: |
    Язык = Russian
 steps:
    - Кликнуть на кнопку выбора языка
    - Выбрать «Russian»
 expected-result: |
    - Текст задачи полностью отображается на русском языке

- summary: |
    Проверка активности Telegram-канала разработчиков
  requirement: |
    Сообщество взаимодействует через Telegram-канал
  prerequisites: |
    Доступ в Telegram
  test-data: |
    Ссылка = https://t.me/codebattle
  steps:
    - Перейти по ссылке в браузере или мобильном приложении  
    - Убедиться, что канал существует и появляются новые сообщения
  expected-result: |
    Канал открыт, последние сообщения не старше недели

- summary: |
    Проверка работоспособности Chrome-extension
  requirement: |
    Возможность разработки и поддержки Chrome-extension
  prerequisites: |
    Собран и загружен в режиме разработчика Chrome-extension из репозитория
  test-data: |
    Страница сайта Codebattle в браузере
  steps:
    - Установить extension в Chrome  
    - Открыть любую страницу Codebattle  
    - Проверить, что extension инициализируется и добавляет ожидаемый UI (например, кнопки или подсветку)
  expected-result: |
    Расширение загружается без ошибок, интегрируется с сайтом согласно спецификации

- summary: |
    Проверка использования HTTPS на сайте
  requirement: |
    Сайт должен обеспечивать безопасность хранения и передачи данных пользователя (HTTPS)
  prerequisites: |
    Пользователь открывает сайт
  test-data: |
    URL = https://codebattle.hexlet.io
  steps:
    - В адресной строке проверяем наличие HTTPS
    - Открываем DevTools → Security
  expected-result: |
    Соединение защищено, сертификат валиден

