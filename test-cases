---
- summary: |
    Проверка входа пользователя с несуществующими логином и паролем
  requirement: |
    При неправильном логине или пароле пользователь должен получить сообщение об ошибке
  prerequisites: |
    Открыта страница логина
  test-data: |
    Тестовые данные
    Логин = ilona Пароль = password
  steps:
    - Вводим логин
    - Вводим пароль
    - Нажимаем кнопку «Войти»
  expected-result: |
    Пользователь должен получить сообщение об ошибке

- summary: |
    Регистрация нового пользователя с валидными данными
  requirement: |
    Пользователь должен иметь возможность создавать аккаунт
  prerequisites: |
    Открыта страница регистрации
  test-data: |
    Email = user@example.com  
    Пароль = StrongPass123
  steps:
    - Вводим email
    - Вводим пароль
    - Нажимаем кнопку «Зарегистрироваться»
    - Переходим по ссылке из письма подтверждения
  expected-result: |
    Аккаунт создан, пользователь автоматически авторизован и перенаправлен на главную страницу

- summary: |
    Вход и выход из системы с корректными данными
  requirement: |
    Пользователь должен иметь возможность входить в систему и выходить из неё (login/logout)
  prerequisites: |
    Зарегистрирован пользователь  
    Открыта страница логина
  test-data: |
    Логин = user@example.com  
    Пароль = StrongPass123
  steps:
    - Вводим логин
    - Вводим пароль
    - Нажимаем кнопку «Войти»
    - После авторизации нажимаем «Выйти»
  expected-result: |
    Пользователь успешно входит в систему, видит свой профиль, затем выходит и возвращается на страницу логина

- summary: |
    Восстановление пароля через email
  requirement: |
    Пользователь должен иметь возможность восстановить пароль
  prerequisites: |
    Открыта страница логина  
    Нет активной сессии
  test-data: |
    Email = user@example.com
  steps:
    - Нажимаем «Забыли пароль?»
    - Вводим зарегистрированный email
    - Переходим по ссылке из письма
    - Вводим новый пароль и подтверждение
  expected-result: |
    Появляется уведомление «Пароль успешно сброшен», после входа новым паролем — доступ разрешён

- summary: |
    Смена пароля в личном кабинете
  requirement: |
    Пользователь должен иметь возможность сменить пароль
  prerequisites: |
    Пользователь авторизован  
    Открыт личный кабинет
  test-data: |
    Текущий пароль = StrongPass123  
    Новый пароль = NewPass456
  steps:
    - Переходим в «Настройки аккаунта»
    - Вводим текущий пароль
    - Вводим новый пароль и подтверждаем
    - Нажимаем «Сохранить»
  expected-result: |
    Пароль обновлён, при входе старый пароль не принимается, новый — работает

- summary: |
    Создание новой игры с выбранным уровнем сложности
  requirement: |
    Пользователь должен иметь возможность создавать игру и выбирать уровень сложности
  prerequisites: |
    Пользователь авторизован  
    Открыта страница создания игры
  test-data: |
    Уровень сложности = «Средний»
  steps:
    - Нажимаем «Создать игру»
    - Выбираем «Средний» уровень сложности
    - Подтверждаем создание
  expected-result: |
    Игра создаётся, отображается ссылка и выбранный уровень сложности

- summary: |
    Приглашение друга по ссылке на игру
  requirement: |
    Пользователь должен иметь возможность приглашать друга или бота по ссылке
  prerequisites: |
    Создана новая игра  
    Пользователь находится в лобби игры
  test-data: |
    Скопированная ссылка для приглашения
  steps:
    - Копируем ссылку из лобби
    - Открываем её в другом браузере или в режиме инкогнито
  expected-result: |
    Второй пользователь (гость) присоединяется в лобби по ссылке

- summary: |
    Одновременное отображение редактора кода и вывода тестов в реальном времени
  requirement: |
    Пользователь должен иметь возможность во время матча видеть редактор кода и вывод тестов
  prerequisites: |
    Оба игрока присоединены к игре  
    Игра запущена
  test-data: |
    Код задачи: простая функция сложения
  steps:
    - Один игрок вводит код
    - Запускает тесты
    - Другой игрок наблюдает за редактором и выводом
  expected-result: |
    Оба игрока видят вводимый код и результаты тестов в реальном времени

- summary: |
    Смена языка программирования во время матча
  requirement: |
    Пользователь должен иметь возможность менять язык во время матча
  prerequisites: |
    Игра запущена  
    Оба игрока в редакторе
  test-data: |
    Начальный язык = JavaScript  
    Новый язык = Python
  steps:
    - Открываем выпадающий список языков
    - Выбираем «Python»
  expected-result: |
    Редактор и подсветка кода переключаются на Python без перезагрузки страницы

- summary: |
    Наблюдение за чужой игрой (spectator mode)
  requirement: |
    Пользователь может следить за ходом чужих матчей в режиме реального времени
  prerequisites: |
    Есть запущенная чужая игра  
    Открыта страница списка игр
  test-data: |
    Выбранная игра из списка
  steps:
    - Нажимаем «Наблюдать» напротив чужой игры
  expected-result: |
    Открывается окно с редактором и выводом тестов участников, без возможности редактировать

- summary: |
    Проверка работы чата внутри игры
  requirement: |
    Пользователь должен иметь возможность использовать чат внутри игры в режиме реального времени
  prerequisites: |
    Игра запущена  
    Два участника в лобби
  test-data: |
    Сообщение = «Привет, удачи!»  
    Ответ = «Спасибо!»
  steps:
    - Открываем вкладку «Чат»
    - Отправляем сообщение «Привет, удачи!»
    - Второй участник отвечает «Спасибо!»
  expected-result: |
    Оба сообщения мгновенно отображаются у обоих участников

- summary: |
    Воспроизведение завершённой игры через проигрыватель
  requirement: |
    После прохождения игры пользователь должен иметь возможность проиграть игру в проигрывателе
  prerequisites: |
    Существует хотя бы одна завершённая игра в профиле
  test-data: |
    Выбранная завершённая игра
  steps:
    - Переходим в профиль пользователя
    - В списке игр нажимаем «Просмотреть»
  expected-result: |
    Открывается проигрыватель, по шагам воспроизводится код и прохождение тестов

- summary: |
    Просмотр очков и рейтинга за разные периоды
  requirement: |
    Каждый пользователь должен иметь возможность просмотреть посчитанные очки и свой рейтинг в таблицах: за неделю, за месяц и за всё время
  prerequisites: |
    Пользователь авторизован и участвовал в играх
  test-data: |
    Периоды = «Неделя», «Месяц», «Все время»
  steps:
    - Переходим в раздел «Рейтинг»
    - Выбираем поочерёдно вкладки «Неделя», «Месяц», «Все время»
  expected-result: |
    Для каждого выбранного периода отображается корректная таблица рейтинга с позициями и очками пользователя
